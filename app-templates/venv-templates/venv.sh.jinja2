#! {{ BASH_PATH }}

echo "Creating virtualenv"
{{ PYTHON_EXE }} -m virtualenv {{ VENV_NAME }}
if [ $? -eq 0 ]
then
	echo "Virtual env $VENV_NAME has been created"
else
	echo "Could not create virtual env $VENV_NAME" 2>/dev/stderr
	exit -1
fi

echo "Activating virtual env"
source {{ VENV_NAME }}/bin/activate
if [ $? -eq 0 ]
then
	echo "virtual env is activated"
else
	echo "Could not activate virtual env" 2>/dev/stderr
	exit -2
fi

env_py="$(which {{ PYTHON_EXE }})"


required_modules=({% for required_module in REQUIRED_MODULES %}{{ required_module }} {% endfor %})

for required_module in "${required_modules[@]}"
do
	echo "Trying to install dependency: $required_module"
    $env_py -m pip install $required_module --prefix {{ VENV_NAME }}
	if [ $? -eq 0 ]
	then
		echo "Installed module $required_module"
	else
		echo "Could not install module $required_module" 2>/dev/stderr
		echo "Use command: pip install $required_module"
	fi
done


$env_py -m pip freeze >> requirements.txt
if [ $? -eq 0 ]
then
	echo "requirments.txt has been created"
else
	echo "Could not freeze the dependencies" 2>/dev/stderr
	echo "Use command: pip freeze > requirments.txt"
fi

{% if GITREPO %}
if which git >/dev/null;then
    echo "Initializing git"
    git init
    if [ $? -eq 0 ]
    then
        echo "Initialized git"
        printf "{{ VENV_NAME }}/*\n{{ PACKAGE_NAME }}/__pycache__/*\n{{ PACKAGE_NAME }}/blueprints/__pycache__/*" > .gitignore
    else
        echo "git initialization has been failed" 2>/dev/stderr
    fi
else
    echo "git executable is not found" 2>/dev/stderr
	echo "install git and execute git init from app directory"
fi
{% endif %}

deactivate
if [ $? -eq 0 ]
then
	echo "Deactivated virtual env"
else
	echo "Could not deactivate virtual env" 2>/dev/stderr
	echo "Use command: deactivate"
fi

